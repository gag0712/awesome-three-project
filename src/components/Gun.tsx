/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, {useEffect, useRef} from 'react';
import {useGLTF} from '@react-three/drei/native';
import {GLTF} from 'three-stdlib';
import {ThreeElements, useFrame, useThree} from '@react-three/fiber/native';

type GLTFResult = GLTF & {
  nodes: {
    b_low: THREE.Mesh;
    a_low: THREE.Mesh;
    e_low: THREE.Mesh;
    g_low: THREE.Mesh;
    r_low: THREE.Mesh;
    l_low: THREE.Mesh;
    j_low: THREE.Mesh;
    m_low: THREE.Mesh;
    w_low: THREE.Mesh;
    f_low: THREE.Mesh;
    c_low: THREE.Mesh;
    h_low: THREE.Mesh;
    d_low: THREE.Mesh;
    y_low: THREE.Mesh;
    n_low: THREE.Mesh;
  };
  materials: {
    dulo: THREE.MeshStandardMaterial;
    rokoyat: THREE.MeshStandardMaterial;
    rog: THREE.MeshStandardMaterial;
    kurok: THREE.MeshStandardMaterial;
    ['Material.002']: THREE.MeshStandardMaterial;
    ['Material.019']: THREE.MeshStandardMaterial;
    ruk: THREE.MeshStandardMaterial;
    baseV: THREE.MeshStandardMaterial;
    baseN: THREE.MeshStandardMaterial;
    planka: THREE.MeshStandardMaterial;
    ['Material.008']: THREE.MeshStandardMaterial;
    prikl: THREE.MeshStandardMaterial;
    ['Material.009']: THREE.MeshStandardMaterial;
    zatw: THREE.MeshStandardMaterial;
    scope: THREE.MeshStandardMaterial;
  };
};

export function Gun(props: JSX.IntrinsicElements['group']) {
  const groupRef = useRef<THREE.Group<THREE.Object3DEventMap>>(null);

  useFrame(() => {
    if (groupRef && groupRef.current) {
      groupRef.current.rotation.y += 0.001;
      groupRef.current.rotation.x += 0.001;
      groupRef.current.rotation.z += 0.001;
    }
  });

  const {nodes, materials} = useGLTF(
    require('../assets/Gun.glb'),
  ) as GLTFResult;
  return (
    <group {...props} dispose={null} scale={0.4} ref={groupRef}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.b_low.geometry}
        material={materials.dulo}
        position={[5.412, 1.013, 0]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.131, 0.11, 0.131]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.a_low.geometry}
        material={materials.rokoyat}
        position={[3.649, 0.616, 0]}
        scale={0.439}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.e_low.geometry}
        material={materials.rog}
        position={[0.257, -0.929, 0]}
        rotation={[Math.PI / 2, 0.166, 0]}
        scale={[0.434, 0.381, 0.76]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.g_low.geometry}
        material={materials.kurok}
        position={[-0.825, -0.049, 0]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.231}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.r_low.geometry}
        material={materials['Material.002']}
        position={[0, 0.881, 0.346]}
        rotation={[-0.291, 0, -Math.PI / 2]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.l_low.geometry}
        material={materials['Material.019']}
        position={[-2.056, 0.963, 0.48]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.114, 0.137, 0.114]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.j_low.geometry}
        material={materials.ruk}
        position={[-2.056, 0.963, 0.48]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.114, 0.137, 0.114]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.m_low.geometry}
        material={materials.baseV}
        position={[-2.056, 0.963, 0.48]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.114, 0.137, 0.114]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.w_low.geometry}
        material={materials.baseN}
        position={[-2.056, 0.963, 0.48]}
        rotation={[0, 0, -Math.PI / 2]}
        scale={[0.114, 0.137, 0.114]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.f_low.geometry}
        material={materials.planka}
        position={[2.706, 1.026, 0]}
        rotation={[-0.394, 0, -Math.PI / 2]}
        scale={0.395}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.c_low.geometry}
        material={materials['Material.008']}
        position={[1.816, 1, 0]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.08}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.h_low.geometry}
        material={materials.prikl}
        position={[-2.394, 0.732, -0.335]}
        rotation={[1.374, -0.281, -0.235]}
        scale={[0.106, 0.098, 0.098]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.d_low.geometry}
        material={materials['Material.009']}
        position={[-1.523, 0.414, -0.234]}
        rotation={[Math.PI / 2, 0, 0]}
        scale={0.091}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.y_low.geometry}
        material={materials.zatw}
        position={[-2.26, 1.305, -0.004]}
        scale={0.159}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.n_low.geometry}
        material={materials.scope}
        position={[4.32, 1.473, -0.004]}
        rotation={[Math.PI / 2, 0, Math.PI / 2]}
        scale={0.056}
      />

      <meshStandardMaterial color={'black'} />
    </group>
  );
}

useGLTF.preload(require('../assets/Gun.glb'));
